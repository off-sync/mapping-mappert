variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
- job: TestWindows
  pool:
    vmImage: 'windows-2019'
  strategy:
    matrix:
      NetCoreApp2_2:
        framework: netcoreapp2.2
      Net461:
        framework: net461

#      Mappert_netcoreapp2.2:
#        projectName: OffSync.Mapping.Mappert.Tests
#        framework: netcoreapp2.2
#      Mappert_net461:
#        projectName: OffSync.Mapping.Mappert.Tests
#        framework: net461
#      DynamicMethods_netcoreapp2.2:
#        projectName: OffSync.Mapping.Mappert.DynamicMethods.Tests
#        framework: netcoreapp2.2
#      DynamicMethods_net461:
#        projectName: OffSync.Mapping.Mappert.DynamicMethods.Tests
#        framework: net461
#      Practises_netcoreapp2.2:
#        projectName: OffSync.Mapping.Mappert.Practises.Tests
#        framework: netcoreapp2.2
#      Practises_net461:
#        projectName: OffSync.Mapping.Mappert.Practises.Tests
#        framework: net461
#      Reflection_netcoreapp2.2:
#        projectName: OffSync.Mapping.Mappert.Reflection.Tests
#        framework: netcoreapp2.2
#      Reflection_net461:
#        projectName: OffSync.Mapping.Mappert.Reflection.Tests
#        framework: net461
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: sdk
      version: 2.2.300
      installationPath: $(Agent.ToolsDirectory)/dotnet

#  - task: DotNetCoreCLI@2
#    displayName: 'Test $(projectName)'
#    inputs:
#      command: test
#      arguments: '--framework $(framework) --logger "trx;LogFileName=$(Agent.TempDirectory)/TestResults/$(projectName)-$(framework).trx" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Agent.TempDirectory)/TestResults/$(projectName)-$(framework).opencover.xml test/$(projectName)/$(projectName).csproj'
#      publishTestResults: true

  - task: DotNetCoreCLI@2
    displayName: 'Build Solution'
    inputs:
      command: build
      arguments: '--configuration Release'

  - task: DotNetCoreCLI@2
    displayName: 'Test'
    inputs:
      command: test
      arguments: '--configuration Release --framework $(framework) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
      projects: test/**/*.csproj
      nobuild: true

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'TestWindows-TestResults-$(projectName)-$(framework)'
      targetPath: '$(Agent.TempDirectory)/TestResults'

- job: Quality
  dependsOn: [ TestWindows ]
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: DownloadPipelineArtifact@1
    inputs:
      downloadPath: '$(Agent.TempDirectory)/TestResults'

  - task: SonarCloudPrepare@1
    displayName: 'Prepare Code Analysis'
    inputs:
      SonarCloud: 'SonarCloud'
      organization: 'off-sync'
      projectKey: 'off-sync_mapping-mappert'
      projectName: 'Off-Sync.com Mappert'
      extraProperties: |
        sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/TestResults/**/*.opencover.xml
        sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/TestResults/**/*.trx

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: sdk
      version: 2.2.300
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: DotNetCoreCLI@2
    displayName: 'Build Solution'
    inputs:
      command: build
      arguments: '--configuration Debug'
  
  - task: SonarCloudAnalyze@1
    displayName: 'Run Code Analysis'

  - task: SonarCloudPublish@1
    displayName: 'Publish Code Analysis'

  - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
    displayName: ReportGenerator
    inputs:     
      reports: '$(Agent.TempDirectory)/TestResults/**/*.opencover.xml'
      targetdir: '$(Agent.TempDirectory)/Reports'
      reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
      assemblyfilters: '-nunit*'

  - task: PublishCodeCoverageResults@1
    inputs:
      summaryFileLocation: '$(Agent.TempDirectory)/Reports/Cobertura.xml'
      reportDirectory: '$(Agent.TempDirectory)/Reports'
      codecoverageTool: cobertura

- job: Pack
  dependsOn: [ TestWindows ]
  pool:
    vmImage: 'windows-2019'
  strategy:
    matrix:
      Mappert:
        projectName: OffSync.Mapping.Mappert
      DynamicMethods:
        projectName: OffSync.Mapping.Mappert.DynamicMethods
      Practises:
        projectName: OffSync.Mapping.Mappert.Practises
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: sdk
      version: 2.2.300
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: DotNetCoreCLI@2
    displayName: 'Pack $(projectName)'
    inputs:
      command: pack
      arguments: '--configuration Release'
      projects: src/$(projectName)/$(projectName).csproj

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Build Artifacts'